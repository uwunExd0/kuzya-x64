#include "block.h"
#include "byte.h"
#include "key.h"

#include <random>

key key::F(key& k, block& c)
{
    key result;
    block tmp;
    tmp = k.left + c;
    tmp = block::S(tmp);
    tmp = block::L(tmp);

    result.left = tmp + k.right;
    result.right = k.left;

    return result;
}

key::key()
{
    roundKeys = new block[10];
}

key::key(block& _left, block& _right)
{
    left = _left;
    right = _right;
    roundKeys = new block[10];
}

key::key(const void* buffer)
{
    left = buffer;
    right = reinterpret_cast<const uint8_t*>(buffer) + 16;
    roundKeys = new block[10];
}

key::key(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f, uint8_t g, uint8_t h, uint8_t i, uint8_t j, uint8_t k, uint8_t l, uint8_t m, uint8_t n, uint8_t o, uint8_t p, uint8_t a1, uint8_t b1, uint8_t c1, uint8_t d1, uint8_t e1, uint8_t f1, uint8_t g1, uint8_t h1, uint8_t i1, uint8_t j1, uint8_t k1, uint8_t l1, uint8_t m1, uint8_t n1, uint8_t o1, uint8_t p1)
{
    left = { a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p };
    right = { a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1 };
    roundKeys = new block[10];
}

key::key(const key& _key)
{
    left = _key.left;
    right = _key.right;
    if (!roundKeys)
    {
        roundKeys = new block[10];
    }

    for (int i = 0; i < block::GetSize(); ++i)
    {
        roundKeys[i] = _key.roundKeys[i];
    }
}

key& key::operator=(const key& buffer)
{
    left = buffer.left; 
    right = buffer.right;
    return *this;
}

void key::Expand()
{
    key tmp12, tmp34;
    roundKeys[0] = left;
    roundKeys[1] = right;

    tmp12 = *this;

    for (int i = 0; i < 4; ++i)
    {
        tmp34 = F(tmp12, iterC[0 + 8 * i]);
        tmp12 = F(tmp34, iterC[1 + 8 * i]);
        tmp34 = F(tmp12, iterC[2 + 8 * i]);
        tmp12 = F(tmp34, iterC[3 + 8 * i]);
        tmp34 = F(tmp12, iterC[4 + 8 * i]);
        tmp12 = F(tmp34, iterC[5 + 8 * i]);
        tmp34 = F(tmp12, iterC[6 + 8 * i]);
        tmp12 = F(tmp34, iterC[7 + 8 * i]);

        roundKeys[2 * i + 2] = tmp12.left;
        roundKeys[2 * i + 3] = tmp12.right;
    }
}

void key::SetRandom()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(0, 255);

    for (int i = 0; i < 16; ++i)
    {
        left[i] = dist(gen);
        right[i] = dist(gen);
    }
}

std::ostream& operator<<(std::ostream& stream, const key& key)
{
    stream << key.left << key.right;
    return stream;
}

block iterC[32] = {
    {0x01,0x94,0x84,0xdd,0x10,0xbd,0x27,0x5d,0xb8,0x7a,0x48,0x6c,0x72,0x76,0xa2,0x6e},

    {0x02,0xeb,0xcb,0x79,0x20,0xb9,0x4e,0xba,0xb3,0xf4,0x90,0xd8,0xe4,0xec,0x87,0xdc},

    {0x03,0x7f,0x4f,0xa4,0x30,0x04,0x69,0xe7,0x0b,0x8e,0xd8,0xb4,0x96,0x9a,0x25,0xb2},

    {0x04,0x15,0x55,0xf2,0x40,0xb1,0x9c,0xb7,0xa5,0x2b,0xe3,0x73,0x0b,0x1b,0xcd,0x7b},

    {0x05,0x81,0xd1,0x2f,0x50,0x0c,0xbb,0xea,0x1d,0x51,0xab,0x1f,0x79,0x6d,0x6f,0x15},

    {0x06,0xfe,0x9e,0x8b,0x60,0x08,0xd2,0x0d,0x16,0xdf,0x73,0xab,0xef,0xf7,0x4a,0xa7},

    {0x07,0x6a,0x1a,0x56,0x70,0xb5,0xf5,0x50,0xae,0xa5,0x3b,0xc7,0x9d,0x81,0xe8,0xc9},

    {0x08,0x2a,0xaa,0x27,0x80,0xa1,0xfb,0xad,0x89,0x56,0x05,0xe6,0x16,0x36,0x59,0xf6},

    {0x09,0xbe,0x2e,0xfa,0x90,0x1c,0xdc,0xf0,0x31,0x2c,0x4d,0x8a,0x64,0x40,0xfb,0x98},

    {0x0a,0xc1,0x61,0x5e,0xa0,0x18,0xb5,0x17,0x3a,0xa2,0x95,0x3e,0xf2,0xda,0xde,0x2a},

    {0x0b,0x55,0xe5,0x83,0xb0,0xa5,0x92,0x4a,0x82,0xd8,0xdd,0x52,0x80,0xac,0x7c,0x44},

    {0x0c,0x3f,0xff,0xd5,0xc0,0x10,0x67,0x1a,0x2c,0x7d,0xe6,0x95,0x1d,0x2d,0x94,0x8d},

    {0x0d,0xab,0x7b,0x08,0xd0,0xad,0x40,0x47,0x94,0x07,0xae,0xf9,0x6f,0x5b,0x36,0xe3},

    {0x0e,0xd4,0x34,0xac,0xe0,0xa9,0x29,0xa0,0x9f,0x89,0x76,0x4d,0xf9,0xc1,0x13,0x51},

    {0x0f,0x40,0xb0,0x71,0xf0,0x14,0x0e,0xfd,0x27,0xf3,0x3e,0x21,0x8b,0xb7,0xb1,0x3f},

    {0x10,0x54,0x97,0x4e,0xc3,0x81,0x35,0x99,0xd1,0xac,0x0a,0x0f,0x2c,0x6c,0xb2,0x2f},

    {0x11,0xc0,0x13,0x93,0xd3,0x3c,0x12,0xc4,0x69,0xd6,0x42,0x63,0x5e,0x1a,0x10,0x41},

    {0x12,0xbf,0x5c,0x37,0xe3,0x38,0x7b,0x23,0x62,0x58,0x9a,0xd7,0xc8,0x80,0x35,0xf3},

    {0x13,0x2b,0xd8,0xea,0xf3,0x85,0x5c,0x7e,0xda,0x22,0xd2,0xbb,0xba,0xf6,0x97,0x9d},

    {0x14,0x41,0xc2,0xbc,0x83,0x30,0xa9,0x2e,0x74,0x87,0xe9,0x7c,0x27,0x77,0x7f,0x54},

    {0x15,0xd5,0x46,0x61,0x93,0x8d,0x8e,0x73,0xcc,0xfd,0xa1,0x10,0x55,0x01,0xdd,0x3a},

    {0x16,0xaa,0x09,0xc5,0xa3,0x89,0xe7,0x94,0xc7,0x73,0x79,0xa4,0xc3,0x9b,0xf8,0x88},

    {0x17,0x3e,0x8d,0x18,0xb3,0x34,0xc0,0xc9,0x7f,0x09,0x31,0xc8,0xb1,0xed,0x5a,0xe6},

    {0x18,0x7e,0x3d,0x69,0x43,0x20,0xce,0x34,0x58,0xfa,0x0f,0xe9,0x3a,0x5a,0xeb,0xd9},

    {0x19,0xea,0xb9,0xb4,0x53,0x9d,0xe9,0x69,0xe0,0x80,0x47,0x85,0x48,0x2c,0x49,0xb7},

    {0x1a,0x95,0xf6,0x10,0x63,0x99,0x80,0x8e,0xeb,0x0e,0x9f,0x31,0xde,0xb6,0x6c,0x05},

    {0x1b,0x01,0x72,0xcd,0x73,0x24,0xa7,0xd3,0x53,0x74,0xd7,0x5d,0xac,0xc0,0xce,0x6b},

    {0x1c,0x6b,0x68,0x9b,0x03,0x91,0x52,0x83,0xfd,0xd1,0xec,0x9a,0x31,0x41,0x26,0xa2},

    {0x1d,0xff,0xec,0x46,0x13,0x2c,0x75,0xde,0x45,0xab,0xa4,0xf6,0x43,0x37,0x84,0xcc},

    {0x1e,0x80,0xa3,0xe2,0x23,0x28,0x1c,0x39,0x4e,0x25,0x7c,0x42,0xd5,0xad,0xa1,0x7e},

    {0x1f,0x14,0x27,0x3f,0x33,0x95,0x3b,0x64,0xf6,0x5f,0x34,0x2e,0xa7,0xdb,0x03,0x10},

    {0x20,0xa8,0xed,0x9c,0x45,0xc1,0x6a,0xf1,0x61,0x9b,0x14,0x1e,0x58,0xd8,0xa7,0x5e}
};