#include "block.h"
#include "byte.h"
#include <sstream>

#define BLOCK_SIZE 16

block::block()
{
	value = new byte[BLOCK_SIZE];
}

block::block(const void* buffer)
{
	value = new byte[BLOCK_SIZE];
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		value[i] = reinterpret_cast<const uint8_t*>(buffer)[i];
	}
}

block::block(const block& buffer)
{
	value = new byte[BLOCK_SIZE];
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		value[i] = buffer.value[i];
	}
}

block::block(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f, uint8_t g, uint8_t h, uint8_t i, uint8_t j, uint8_t k, uint8_t l, uint8_t m, uint8_t n, uint8_t o, uint8_t p)
{
	value = new byte[BLOCK_SIZE] { a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p };
}

block::~block()
{
	delete[] value;
}

block& block::operator=(const block& buffer)
{
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		value[i] = buffer.value[i];
	}

	return *this;
}

block& block::operator=(const void* buffer)
{
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		value[i] = reinterpret_cast<const uint8_t*>(buffer)[i];
	}

	return *this;
}

byte& block::operator[](int indx)
{
	return value[indx];
}

const byte& block::operator[](int indx) const
{
	return value[indx];
}

block block::operator+(const block& a)
{
	block result;
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		result[i] =  value[i] + a[i];
	}

	return result;
}

void block::operator+=(const block& a)
{
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		value[i] += a[i];
	}
}

void block::operator<<=(const int pos)
{
	*reinterpret_cast<uint64_t*>(value+8) <<= 1;
	*reinterpret_cast<uint64_t*>(value+8) |= (*reinterpret_cast<uint64_t*>(value) >> 63);
	*reinterpret_cast<uint64_t*>(value) <<= 1;
}

void block::Clear()
{
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		value[i] = 0;
	}
}

std::string block::ToString()
{
	std::stringstream stream;
	stream << std::hex << *reinterpret_cast<uint64_t*>(value + 8) << *reinterpret_cast<uint64_t*>(value);

	return stream.str();
}

block block::S(block& a)
{
	block result;
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		result[i] = PI[a[i]];
	}

	return result;
}

void block::R(block& state)
{
	byte a_15 = state[0] * vecL[0];
	for (int i = 1; i < BLOCK_SIZE; ++i)
	{
		state[i - 1] = state[i];
		a_15 += state[i] * vecL[i];
	}

	state[15] = a_15;
}

block block::L(block& in)
{
	block result;
	result = in;
	for (int i = 0; i < 16; ++i)
	{
		R(result);
	}

	return result;
}

block block::InverseS(block& a)
{
	block b;
	for (int i = 0; i < BLOCK_SIZE; ++i)
	{
		b[i] = invPI[a[i]];
	}

	return b;
}

void block::InverseR(block& state)
{
	byte a_0 = state[15] * vecL[0];

	for (int i = 15; i > 0; --i)
	{
		state[i] = state[i - 1];
		a_0 += state[i] * vecL[i];
	}

	state[0] = a_0;
}

block block::InverseL(block& in)
{
	block result;
	result = in;

	for (int i = 0; i < 16; ++i)
	{
		InverseR(result);
	}

	return result;
}

std::ostream& operator<<(std::ostream& stream, const block& block)
{
	stream << std::hex << *reinterpret_cast<uint64_t*>(block.value+8) << *reinterpret_cast<uint64_t*>(block.value);
	stream << std::dec;
	return stream;
}

byte PI[256] = {
	0xfc, 0xee, 0xdd, 0x11, 0xcf, 0x6e, 0x31, 0x16, 0xfb, 0xc4, 0xfa, 0xda, 0x23, 0xc5, 0x04, 0x4d,
	0xe9, 0x77, 0xf0, 0xdb, 0x93, 0x2e, 0x99, 0xba, 0x17, 0x36, 0xf1, 0xbb, 0x14, 0xcd, 0x5f, 0xc1,
	0xf9, 0x18, 0x65, 0x5a, 0xe2, 0x5c, 0xef, 0x21, 0x81, 0x1c, 0x3c, 0x42, 0x8b, 0x01, 0x8e, 0x4f,
	0x05, 0x84, 0x02, 0xae, 0xe3, 0x6a, 0x8f, 0xa0, 0x06, 0x0b, 0xed, 0x98, 0x7f, 0xd4, 0xd3, 0x1f,
	0xeb, 0x34, 0x2c, 0x51, 0xea, 0xc8, 0x48, 0xab, 0xf2, 0x2a, 0x68, 0xa2, 0xfd, 0x3a, 0xce, 0xcc,
	0xb5, 0x70, 0x0e, 0x56, 0x08, 0x0c, 0x76, 0x12, 0xbf, 0x72, 0x13, 0x47, 0x9c, 0xb7, 0x5d, 0x87,
	0x15, 0xa1, 0x96, 0x29, 0x10, 0x7b, 0x9a, 0xc7, 0xf3, 0x91, 0x78, 0x6f, 0x9d, 0x9e, 0xb2, 0xb1,
	0x32, 0x75, 0x19, 0x3d, 0xff, 0x35, 0x8a, 0x7e, 0x6d, 0x54, 0xc6, 0x80, 0xc3, 0xbd, 0x0d, 0x57,
	0xdf, 0xf5, 0x24, 0xa9, 0x3e, 0xa8, 0x43, 0xc9, 0xd7, 0x79, 0xd6, 0xf6, 0x7c, 0x22, 0xb9, 0x03,
	0xe0, 0x0f, 0xec, 0xde, 0x7a, 0x94, 0xb0, 0xbc, 0xdc, 0xe8, 0x28, 0x50, 0x4e, 0x33, 0x0a, 0x4a,
	0xa7, 0x97, 0x60, 0x73, 0x1e, 0x00, 0x62, 0x44, 0x1a, 0xb8, 0x38, 0x82, 0x64, 0x9f, 0x26, 0x41,
	0xad, 0x45, 0x46, 0x92, 0x27, 0x5e, 0x55, 0x2f, 0x8c, 0xa3, 0xa5, 0x7d, 0x69, 0xd5, 0x95, 0x3b,
	0x07, 0x58, 0xb3, 0x40, 0x86, 0xac, 0x1d, 0xf7, 0x30, 0x37, 0x6b, 0xe4, 0x88, 0xd9, 0xe7, 0x89,
	0xe1, 0x1b, 0x83, 0x49, 0x4c, 0x3f, 0xf8, 0xfe, 0x8d, 0x53, 0xaa, 0x90, 0xca, 0xd8, 0x85, 0x61,
	0x20, 0x71, 0x67, 0xa4, 0x2d, 0x2b, 0x09, 0x5b, 0xcb, 0x9b, 0x25, 0xd0, 0xbe, 0xe5, 0x6c, 0x52,
	0x59, 0xa6, 0x74, 0xd2, 0xe6, 0xf4, 0xb4, 0xc0, 0xd1, 0x66, 0xaf, 0xc2, 0x39, 0x4b, 0x63, 0xb6,
};
byte invPI[256] = {
	0xa5, 0x2d, 0x32, 0x8f, 0x0e, 0x30, 0x38, 0xc0, 0x54, 0xe6, 0x9e, 0x39, 0x55, 0x7e, 0x52, 0x91,
	0x64, 0x03, 0x57, 0x5a, 0x1c, 0x60, 0x07, 0x18, 0x21, 0x72, 0xa8, 0xd1, 0x29, 0xc6, 0xa4, 0x3f,
	0xe0, 0x27, 0x8d, 0x0c, 0x82, 0xea, 0xae, 0xb4, 0x9a, 0x63, 0x49, 0xe5, 0x42, 0xe4, 0x15, 0xb7,
	0xc8, 0x06, 0x70, 0x9d, 0x41, 0x75, 0x19, 0xc9, 0xaa, 0xfc, 0x4d, 0xbf, 0x2a, 0x73, 0x84, 0xd5,
	0xc3, 0xaf, 0x2b, 0x86, 0xa7, 0xb1, 0xb2, 0x5b, 0x46, 0xd3, 0x9f, 0xfd, 0xd4, 0x0f, 0x9c, 0x2f,
	0x9b, 0x43, 0xef, 0xd9, 0x79, 0xb6, 0x53, 0x7f, 0xc1, 0xf0, 0x23, 0xe7, 0x25, 0x5e, 0xb5, 0x1e,
	0xa2, 0xdf, 0xa6, 0xfe, 0xac, 0x22, 0xf9, 0xe2, 0x4a, 0xbc, 0x35, 0xca, 0xee, 0x78, 0x05, 0x6b,
	0x51, 0xe1, 0x59, 0xa3, 0xf2, 0x71, 0x56, 0x11, 0x6a, 0x89, 0x94, 0x65, 0x8c, 0xbb, 0x77, 0x3c,
	0x7b, 0x28, 0xab, 0xd2, 0x31, 0xde, 0xc4, 0x5f, 0xcc, 0xcf, 0x76, 0x2c, 0xb8, 0xd8, 0x2e, 0x36,
	0xdb, 0x69, 0xb3, 0x14, 0x95, 0xbe, 0x62, 0xa1, 0x3b, 0x16, 0x66, 0xe9, 0x5c, 0x6c, 0x6d, 0xad,
	0x37, 0x61, 0x4b, 0xb9, 0xe3, 0xba, 0xf1, 0xa0, 0x85, 0x83, 0xda, 0x47, 0xc5, 0xb0, 0x33, 0xfa,
	0x96, 0x6f, 0x6e, 0xc2, 0xf6, 0x50, 0xff, 0x5d, 0xa9, 0x8e, 0x17, 0x1b, 0x97, 0x7d, 0xec, 0x58,
	0xf7, 0x1f, 0xfb, 0x7c, 0x09, 0x0d, 0x7a, 0x67, 0x45, 0x87, 0xdc, 0xe8, 0x4f, 0x1d, 0x4e, 0x04,
	0xeb, 0xf8, 0xf3, 0x3e, 0x3d, 0xbd, 0x8a, 0x88, 0xdd, 0xcd, 0x0b, 0x13, 0x98, 0x02, 0x93, 0x80,
	0x90, 0xd0, 0x24, 0x34, 0xcb, 0xed, 0xf4, 0xce, 0x99, 0x10, 0x44, 0x40, 0x92, 0x3a, 0x01, 0x26,
	0x12, 0x1a, 0x48, 0x68, 0xf5, 0x81, 0x8b, 0xc7, 0xd6, 0x20, 0x0a, 0x08, 0x00, 0x4c, 0xd7, 0x74,
};
byte vecL[256] = {
	 1, 148, 32, 133, 16, 194, 192, 1,
	251, 1, 192, 194, 16, 133, 32, 148
};